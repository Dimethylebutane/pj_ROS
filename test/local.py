import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import make_splprep, splev
from scipy.signal import find_peaks

inf = np.inf

def d1():
    return np.array([0.7143741846084595, 0.7036751508712769, 0.7156053781509399, 0.7103971242904663, 0.7151650190353394, 0.7301672101020813, 0.7444623112678528, 0.7328944206237793, 0.744705319404602, 0.7505940198898315, 0.7566240429878235, 0.7555683851242065, 0.7740723490715027, 0.7680016160011292, 0.7732661962509155, 0.7969275116920471, 0.7989522814750671, 0.7834707498550415, 0.7912606000900269, 0.8022313117980957, 0.8122549653053284, 0.8213323354721069, 0.8164041638374329, 0.7983823418617249, 0.8196902871131897, 0.8299882411956787, 0.83207106590271, 0.8244131803512573, 0.8233306407928467, 0.8068796992301941, 0.78596031665802, 0.7941493988037109, 0.7583003640174866, 0.7430156469345093, 0.6622305512428284, 0.6333104372024536, 0.2859821915626526, 0.2732636630535126, 0.23593804240226746, 0.2620697021484375, 0.24438194930553436, 0.24154601991176605, 0.22992992401123047, 0.2209705263376236, 0.2174953818321228, 0.22016829252243042, 0.2128886729478836, 0.2277536392211914, 0.21178960800170898, 0.211238831281662, 0.20808003842830658, 0.2299671769142151, 0.2209608107805252, 0.21941819787025452, 0.20786339044570923, 0.2107807844877243, 0.21608397364616394, 0.20847365260124207, 0.21258538961410522, 0.21256554126739502, 0.21336209774017334, 0.22826196253299713, 0.22746096551418304, 0.2066343128681183, 0.22109177708625793, 0.21103835105895996, 0.21817049384117126, 0.23685139417648315, 0.2377413511276245, 0.22766384482383728, 0.2311626374721527, 0.245708629488945, 0.23098982870578766, 0.25181230902671814, 0.2560121417045593, 0.2671785056591034, 0.2623558044433594, 0.2795945405960083, 0.2523552179336548, 0.27991291880607605, 0.2812402844429016, 0.2965141534805298, 0.31010350584983826, 0.30067557096481323, 0.2936647832393646, 0.319399356842041, 0.331466406583786, 0.36401626467704773, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 0.5093023777008057, 0.5049816966056824, 0.5092810988426208, 0.49482157826423645, 0.4732532203197479, 0.4814217984676361, 0.47776803374290466, 0.47169792652130127, 0.46693456172943115, 0.4681040942668915, 0.47499194741249084, 0.46147480607032776, 0.4662685990333557, 0.46709316968917847, 0.45708978176116943, 0.4367893934249878, 0.4461733102798462, 0.430361807346344, 0.4498997628688812, 0.42836007475852966, 0.4204990565776825, 0.4214170575141907, 0.4391184449195862, 0.41309142112731934, 0.4117726981639862, 0.41160398721694946, 0.4066964387893677, 0.3944915235042572, 0.4112914800643921, 0.41421470046043396, 0.40788260102272034, 0.40828993916511536, 0.4219084084033966, 0.39837178587913513, 0.4096243679523468, 0.38595399260520935, 0.4015498161315918, 0.406004935503006, 0.42705851793289185, 0.385254442691803, 0.4152967929840088, 0.39205431938171387, 0.42553773522377014, 0.41783180832862854, 0.4104394316673279, 0.40069541335105896, 0.39844122529029846, 0.401355504989624, 0.409646600484848, 0.41116687655448914, 0.3865147829055786, 0.3772662878036499, 0.4044783413410187, 0.39024606347084045, 0.3979127109050751, 0.39531978964805603, 0.38694024085998535, 0.3579196333885193, 0.3673720955848694, 0.34626302123069763, 0.3629189729690552, 0.35018929839134216, 0.34404513239860535, 0.33335480093955994, 0.34549543261528015, 0.3081863224506378, 0.3338162302970886, 0.3206036686897278, 0.32516857981681824, 0.3152342140674591, 0.2875559329986572, 0.28938350081443787, 0.2734013497829437, 0.2751934826374054, 0.2865329682826996, 0.2692279815673828, 0.2782566249370575, 0.27708446979522705, 0.263081431388855, 0.2698315978050232, 0.26119279861450195, 0.2751421332359314, 0.2761157751083374, 0.25485754013061523, 0.2516663670539856, 0.24602699279785156, 0.23771214485168457, 0.2410242259502411, 0.23748870193958282, 0.24005119502544403, 0.22323983907699585, 0.2525780200958252, 0.22209911048412323, 0.22589737176895142, 0.2310967892408371, 0.24700352549552917, 0.22855979204177856, 0.23600758612155914, 0.2398805469274521, 0.2305801510810852, 0.23108914494514465, 0.23489920794963837, 0.21815185248851776, 0.22242112457752228, 0.24563857913017273, 0.23231151700019836, 0.21823371946811676, 0.23344150185585022, 0.21298125386238098, 0.21250149607658386, 0.21739459037780762, 0.2085069864988327, 0.21226011216640472, 0.22114455699920654, 0.2291291207075119, 0.2234848141670227, 0.21940182149410248, 0.209286630153656, 0.21935142576694489, 0.23270229995250702, 0.24875856935977936, 0.23623831570148468, 0.2524729073047638, 0.24196666479110718, 0.24690577387809753, 0.24134521186351776, 0.23913416266441345, 0.24748839437961578, 0.25753283500671387, 0.2725798785686493, 0.240457221865654, 0.27086275815963745, 0.2856397330760956, 0.26524674892425537, 0.2951008379459381, 0.30537939071655273, 1.0659749507904053, 1.0754891633987427, 1.0703728199005127, 1.1177825927734375, 1.1150360107421875, 1.113492727279663, 1.1398345232009888, 1.1748740673065186, 1.1897825002670288, 1.2239216566085815, 1.219226598739624, 1.2380411624908447, 1.2974042892456055, 1.9551728963851929, 1.9210076332092285, 1.9032392501831055, 1.8963632583618164, 1.8709077835083008, 1.8746051788330078, 1.835634469985962, 1.834517240524292, 1.831045389175415, 1.8120661973953247, 0.8012943863868713, 0.7648691534996033, 0.7627653479576111, 0.7235187292098999, 0.7542605996131897, 0.7284122705459595, 0.7341999411582947, 0.7103410363197327, 0.7106491327285767, 0.714719295501709, 0.721004843711853, 0.7095866203308105, 0.7102279663085938, 0.7028369307518005, 0.6934854984283447, 0.6846967339515686, 0.6838024258613586, 0.6860426068305969, 0.6974223256111145, 0.6949877738952637, 0.6968490481376648, 0.6900752186775208, 0.6875581741333008, 0.6945188045501709, 0.7078099250793457, 0.6967015862464905, 0.7130967378616333, 0.7257418036460876])

def d2():
    return np.array([0.6135132908821106, 0.6312710642814636, 0.6499696373939514, 0.6644206643104553, 0.6728678941726685, 0.6757930517196655, 0.7170110940933228, 0.7233492136001587, 1.3880239725112915, 1.3859307765960693, 1.3589296340942383, 1.3628629446029663, 1.34211003780365, 1.3408138751983643, 1.3225942850112915, 1.3141276836395264, 1.2989861965179443, 1.2761330604553223, 1.2820351123809814, 1.2819267511367798, 1.2776561975479126, 1.252200961112976, 1.2566009759902954, 1.2447837591171265, 1.2446352243423462, 1.2070790529251099, 1.228859543800354, 1.2147808074951172, 1.2177631855010986, 1.2072100639343262, 1.2047361135482788, 1.2099823951721191, 1.1754668951034546, 1.1693731546401978, 1.1726300716400146, 0.30969759821891785, 0.3079676032066345, 0.27382132411003113, 0.28855037689208984, 0.27104926109313965, 0.26770660281181335, 0.2588648796081543, 0.255736768245697, 0.24736972153186798, 0.2575129568576813, 0.24870802462100983, 0.26192769408226013, 0.22949056327342987, 0.23212027549743652, 0.24285435676574707, 0.23805193603038788, 0.24153928458690643, 0.23584263026714325, 0.2414332777261734, 0.24951522052288055, 0.24666345119476318, 0.24898682534694672, 0.23540090024471283, 0.22868187725543976, 0.25914567708969116, 0.23754186928272247, 0.22945910692214966, 0.2577945590019226, 0.2593277394771576, 0.27140480279922485, 0.24826130270957947, 0.2625303864479065, 0.2536143362522125, 0.23381435871124268, 0.2594694495201111, 0.2548741102218628, 0.25726020336151123, 0.24500566720962524, 0.26323139667510986, 0.2772963345050812, 0.28743594884872437, 0.2791048586368561, 0.2754414975643158, 0.27630549669265747, 0.2681548595428467, 0.28435149788856506, 0.2830463945865631, 0.29109248518943787, 0.30388379096984863, 0.3069656193256378, 0.3083261251449585, 0.32940661907196045, 0.334810733795166, 0.3401443362236023, 0.3175034523010254, 0.36206015944480896, 0.3643296957015991, 0.3682202994823456, 0.3844046890735626, 0.3573964536190033, 0.40673044323921204, 0.4007488489151001, 0.4295653700828552, 0.43543756008148193, 0.4514469504356384, 0.475064218044281, 0.500201940536499, 0.5285823345184326, 0.588966429233551, 0.5958811044692993, 0.6224666237831116, 0.6560903787612915, 0.6906138062477112, 0.6953080892562866, 0.708871603012085, 0.7212451100349426, 0.7320482730865479, 0.7715712189674377, 0.7600469589233398, 0.7668176889419556, 0.7852761149406433, 0.7894026637077332, 0.7889222502708435, 0.8005426526069641, 0.7541002631187439, 0.7833471298217773, 0.7958366274833679, 0.7806496024131775, 0.7448745369911194, 0.7513628602027893, 0.7423527836799622, 0.7322536110877991, 0.7288519740104675, 0.7188717722892761, 0.7003277540206909, 0.7167941331863403, 0.6843394637107849, 0.6949918866157532, 0.6826534867286682, 0.681885838508606, 0.651782214641571, 0.6537569165229797, 0.6429604887962341, 0.66007000207901, 0.6233713626861572, 0.6360032558441162, 0.6127549409866333, 0.6103880405426025, 0.6052741408348083, 0.5896041393280029, 0.5945044159889221, 0.6141944527626038, 0.5839930772781372, 0.5856655240058899, 0.5790104269981384, 0.5621353983879089, 0.564505398273468, 0.5776124000549316, 0.5749790072441101, 0.54446941614151, 0.5556970834732056, 0.5426803827285767, 0.5426201820373535, 0.5407531261444092, 0.5501158237457275, 0.5645819902420044, 0.5429145693778992, 0.554844081401825, 0.5652165412902832, 0.5590370297431946, 0.5731033682823181, 0.5846595168113708, 0.60377436876297, 0.632794201374054, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 0.2787134349346161, 0.2657228708267212, 0.2589034140110016, 0.24620480835437775, 0.25559890270233154, 0.22865408658981323, 0.24645957350730896, 0.22285358607769012, 0.26437288522720337, 0.22071313858032227, 0.23951515555381775, 0.23971357941627502, 0.2266152948141098, 0.23657357692718506, 0.2323770672082901, 0.23249927163124084, 0.237703338265419, 0.2357201725244522, 0.24373139441013336, 0.22962485253810883, 0.23221230506896973, 0.23186297714710236, 0.23727504909038544, 0.24704383313655853, 0.24707019329071045, 0.2226121723651886, 0.2324569970369339, 0.23734380304813385, 0.2102644145488739, 0.2331259697675705, 0.23104657232761383, 0.23182164132595062, 0.2351888120174408, 0.24483461678028107, 0.24081391096115112, 0.2563275396823883, 0.24561956524848938, 0.23341214656829834, 0.27152934670448303, 0.25942614674568176, 0.27077776193618774, 0.2614232897758484, 0.2637607455253601, 0.27744266390800476, 0.28117698431015015, 0.29512473940849304, 0.27778133749961853, 0.3113873302936554, 0.3062187135219574, 0.3024805188179016, 0.3276326358318329, 0.3210989534854889, 0.3153194785118103, 0.31399860978126526, 0.3253631591796875, 0.337231308221817, 0.35394251346588135, 0.35167551040649414, 0.3479756712913513, 0.3644431531429291, 0.3662760853767395, 0.3711235225200653, 0.4022935628890991, 0.4052896797657013, 0.4139542281627655, 0.44227150082588196, 0.4562585651874542, 0.4561302363872528, 0.45916813611984253, 0.446158766746521, 0.47311535477638245, 0.47936302423477173, 0.4809291660785675, 0.503831684589386, 0.5008885860443115, 0.5018500089645386, 0.5215036869049072, 0.5095551013946533, 0.5425527691841125, 0.5181947946548462, 0.5413713455200195, 0.5493354201316833, 0.542512834072113, 0.5284281969070435, 0.5360060334205627, 0.5301121473312378, 0.5188329815864563, 0.5275489091873169, 0.5271366834640503, 0.5060862302780151, 0.5327365398406982, 0.5147518515586853, 0.5062505602836609, 0.5083476901054382, 0.5113330483436584, 0.5066099166870117, 0.5137671828269958, 0.4944472312927246, 0.5079017877578735, 0.5080007314682007, 0.49866193532943726, 0.4911457896232605, 0.516737163066864, 0.5170050263404846, 0.4985256791114807, 0.5201135873794556, 0.47271814942359924, 0.49627551436424255, 0.49690261483192444, 0.4989539682865143, 0.4882844090461731, 0.5030826926231384, 0.49589210748672485, 0.5081771612167358, 0.5055817365646362, 0.506495475769043, 0.49647584557533264, 0.5097490549087524, 0.4853299856185913, 0.5197734832763672, 0.49554041028022766, 0.49786266684532166, 0.4836421608924866, 0.4960605502128601, 0.4902893900871277, 0.5031253099441528, 0.4969801604747772, 0.5076313614845276, 0.5014323592185974, 0.4936935305595398, 0.4974358379840851, 0.5105363130569458, 0.5014603137969971, 0.5209829211235046, 0.5158788561820984, 0.5216394066810608, 0.5278767943382263, 0.4909777343273163, 0.5027569532394409, 0.5274763703346252, 0.5287131071090698, 0.5497982501983643, 0.5315476655960083, 0.5420961976051331, 0.551367998123169, 0.5441604256629944, 0.5635093450546265, 0.5398441553115845, 0.5494394302368164, 0.5555676221847534, 0.5937361121177673, 0.574005663394928, 0.5878931879997253, 0.5892820358276367, 0.5995566248893738, 0.5960663557052612, 0.6151597499847412, 0.6153641939163208])

def d3():
    return np.array([inf, inf, inf, inf, inf, inf, inf, inf, 2.2626545429229736, 2.20849347114563, 2.142394781112671, 2.096104383468628, 2.0150880813598633, 1.9636818170547485, 1.820170283317566, 1.7395099401474, 1.6370642185211182, 1.5315827131271362, 1.3657433986663818, 1.0238926410675049, 0.9492860436439514, 0.9059891104698181, 0.863004744052887, 0.8241537809371948, 0.7792403697967529, 0.7562332153320312, 0.7134164571762085, 0.6929712891578674, 0.6826120018959045, 0.6461548209190369, 0.6387523412704468, 0.6199964880943298, 0.6104194521903992, 0.5731919407844543, 0.5733826160430908, 0.5454965233802795, 0.5764250159263611, 0.5416536927223206, 0.5338660478591919, 0.5328189134597778, 0.4880446791648865, 0.5144044756889343, 0.473727285861969, 0.49240583181381226, 0.5024593472480774, 0.4882358908653259, 0.47525155544281006, 0.4722375273704529, 0.4365295171737671, 0.4533444046974182, 0.439736545085907, 0.4558175504207611, 0.43166619539260864, 0.41606053709983826, 0.4148663580417633, 0.41150081157684326, 0.4249137043952942, 0.41598546504974365, 0.40326011180877686, 0.37468868494033813, 0.4111541211605072, 0.4011682868003845, 0.38649094104766846, 0.4094772934913635, 0.39304324984550476, 0.3714745342731476, 0.3894549310207367, 0.3837277293205261, 0.36854153871536255, 0.39374586939811707, 0.389325886964798, 0.36399003863334656, 0.374538779258728, 0.3619190454483032, 0.3715165853500366, 0.37119486927986145, 0.353635311126709, 0.3697890341281891, 0.37990596890449524, 0.36253178119659424, 0.3870289623737335, 0.36860090494155884, 0.34826523065567017, 0.3589375615119934, 0.34900176525115967, 0.3780766725540161, 0.353789359331131, 0.37193629145622253, 0.38434338569641113, 0.381502628326416, 0.36749741435050964, 0.3490011692047119, 0.3599555194377899, 0.3662382662296295, 0.3671724498271942, 0.3590082824230194, 0.37296998500823975, 0.37547892332077026, 0.36654943227767944, 0.3757224977016449, 0.3802012801170349, 0.36362308263778687, 0.37771254777908325, 0.38237395882606506, 0.3922922909259796, 0.38827067613601685, 0.39551597833633423, 0.3670935034751892, 0.3929019570350647, 0.3958919644355774, 0.4029528796672821, 0.38491904735565186, 0.40515995025634766, 0.40696072578430176, 0.405970960855484, 0.4054952561855316, 0.41295626759529114, 0.439546674489975, 0.4043683707714081, 0.40348726511001587, 0.4355304539203644, 0.45619499683380127, 0.44343194365501404, 0.4477105140686035, 0.4439593553543091, 0.45066261291503906, 0.45160627365112305, 0.4680159091949463, 0.4381730258464813, 0.4693676233291626, 0.4781661927700043, 0.48232176899909973, 0.4783414900302887, 0.46661531925201416, 0.4997107982635498, 0.49640530347824097, 0.5188685655593872, 0.5206629037857056, 0.5222133994102478, 0.5192493796348572, 0.5507150292396545, 0.5346180200576782, 0.5393890738487244, 0.55295330286026, 0.5574345588684082, 0.5500128865242004, 0.5577466487884521, 0.5519816875457764, 0.5792988538742065, 0.5661512613296509, 0.5569292306900024, 0.5704327821731567, 0.5371851921081543, 0.5946125388145447, 0.5577879548072815, 0.5574986934661865, 0.5574232339859009, 0.5520899295806885, 0.5618265271186829, 0.5524182915687561, 0.5482119917869568, 0.5529862642288208, 0.5542663335800171, 0.5391628742218018, 0.5459157824516296, 0.5525676012039185, 0.5365003347396851, 0.5311794877052307, 0.5286983847618103, 0.5337151885032654, 0.5087354183197021, 0.5257168412208557, 0.529868483543396, 0.5437718629837036, 0.5167394876480103, 0.5208900570869446, 0.4998558461666107, 0.5129846334457397, 0.49733418226242065, 0.5045716762542725, 0.5133845806121826, 0.49033164978027344, 0.48603442311286926, 0.5080475211143494, 0.5149099230766296, 0.5208799242973328, 0.5004475712776184, 0.47642529010772705, 0.4918738007545471, 0.48840436339378357, 0.47845423221588135, 0.5074087381362915, 0.4833050072193146, 0.48121538758277893, 0.4772586524486542, 0.48813408613204956, 0.4999033808708191, 0.47660601139068604, 0.48790642619132996, 0.471250057220459, 0.4847833812236786, 0.477155864238739, 0.47837337851524353, 0.49014344811439514, 0.4758152663707733, 0.4907265901565552, 0.49056312441825867, 0.5019802451133728, 0.5006005167961121, 0.49587106704711914, 0.5163077116012573, 0.4886540472507477, 0.49369755387306213, 0.4988633692264557, 0.5122451186180115, 0.49929752945899963, 0.5084817409515381, 0.5037360191345215, 0.5449331998825073, 0.5357180237770081, 0.5252286791801453, 0.5439730882644653, 0.5478719472885132, 0.578711748123169, 0.5742778182029724, 0.576237142086029, 0.6006314754486084, 0.6111997961997986, 0.6162925958633423, 0.6412578821182251, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 1.1873348951339722, 1.1566911935806274, 1.1339375972747803, 1.1436651945114136, 1.116757869720459, 1.1099625825881958, 1.116536021232605, 1.1105942726135254, 1.109850287437439, 1.1118800640106201, 1.1268378496170044, 1.095815896987915, 1.145386815071106, 1.1027047634124756, 1.124725580215454, 1.1173268556594849, 1.1096566915512085, 1.1119451522827148, 1.1016484498977661, 1.1211553812026978, 1.103959560394287, 1.1243091821670532, 0.22038228809833527, 0.19007481634616852, 0.19833692908287048, 0.19507625699043274, 0.18451763689517975, 0.15366746485233307, 0.1653735190629959, 0.1487894207239151, 0.14371174573898315, 0.13392333686351776, 0.14634889364242554, 0.15790866315364838, 0.15310989320278168, 0.14415836334228516, 0.13657337427139282, 0.16084372997283936, 0.1533922553062439, 0.1472448706626892, 0.1415054351091385, 0.15696993470191956, 0.16434839367866516, 0.15122480690479279, 0.12709055840969086, 0.1505865454673767, 0.1407742202281952, 0.1484091877937317, 0.14714747667312622, 0.14400792121887207, 0.13974550366401672, 0.13454994559288025, 0.15565690398216248, 0.15906406939029694, 0.1391606479883194, 0.1372641772031784, 0.1447010040283203, 0.15411029756069183, 0.14737369120121002, 0.15203332901000977, 0.14949743449687958, 0.1475740224123001, 0.1409805417060852, 0.1359161138534546, 0.15161307156085968, 0.1459389328956604, 0.141580268740654, 0.1602656990289688, 0.15601393580436707, 0.15647538006305695, 0.16089904308319092, 0.16046400368213654, 0.16593147814273834, 0.1736915111541748, 0.1704254150390625, 0.1707545816898346, 0.1934291422367096, 0.20266929268836975, 0.19954761862754822, 0.20102620124816895, 0.22014836966991425, 0.2307671159505844, 0.22059473395347595, 0.21167314052581787, 0.23025156557559967, 0.26613950729370117, 0.2373567521572113, 0.28496497869491577, 0.29206642508506775, 0.3093731999397278, 0.3252163827419281, 0.38453209400177, 0.399806946516037, 0.4802961051464081, 0.5287498831748962, 0.6061954498291016, 0.730160117149353, 0.8158391714096069, 0.8533726334571838, 0.9256090521812439, 1.0026392936706543, 1.057186245918274, 1.1131819486618042, 1.1487367153167725, 1.1802784204483032, 1.293902039527893, 1.3294082880020142, 1.4109545946121216, 1.4485833644866943, 1.5323659181594849, 1.5881986618041992, 1.7848902940750122, 1.8783659934997559, 2.0564801692962646, 2.3353142738342285, inf, inf, inf, inf])

def l2c(l, Ii=0, If=360):
    angl = np.linspace(Ii*np.pi/180, If*np.pi/180, If-Ii, True)
    return l*np.cos(angl), l*np.sin(angl)

def tilde(P):
    return np.column_stack((P, np.ones(P.shape[0])))

def dstsq(a, b): #vectorisé
    if a.shape != b.shape:
        return np.sum((a-b)**2, axis=1)
    return np.dot(a-b, a-b)

l1 = d3()
xy = np.array(l2c(l1))[:, np.isfinite(l1)]
plt.plot(xy[0,:], xy[1,:], "+")
#plt.figure()

def group(ld):#magie noir numpy pour opti, voir algo de base en commentaire
    xy = np.array(l2c(ld))
    xy = np.vstack((xy, ld)).T#, np.linspace(0, 2*np.pi, 360, True))).T
    xy = xy[ np.isfinite(xy[:,2]) ] #remove +/-inf

    dst = xy[:,:2]
    dst = dst[1:]-dst[:-1] #écart
    dst = np.sum(dst*dst, axis=1) #distance avec le point suivant

    dl = xy[1:,2]+xy[:-1,2] #2 * moyenne(distance au robot, sur **2 points**) -> 2pts : ca annule le 1/0.5 ligne suivante
    bump = dst > 0.1/(dl) #on groupe les points tq : dist avec le suivant < 0.1 * (1/(2*dl)) / 0.5
    bump = np.where(bump)[0]+1 #weird index décalage
    r = np.split(xy, bump, axis=0)

    #clean up
    r = [a for a in r if len(a) >= 5] #uniquement les groupes de 5 pts ou plus
    #fusion premier et dernier si mm groupe:
    v = r[0][0,:2]-r[-1][-1,:2] #distance entre les xy
    if np.dot(v, v) < 0.1/(r[-1][-1,2] + r[0][0,2]):
        r[0] = np.append(r[-1], r[0])
        r[0] = r[0].reshape((len(r[0])//3), 3)
        r = r[:-1] #suppr le dernier que l'on a bougé

    return r

    r = []
    i = 1
    curr = [xy[0]]
    while i < len(xy):
        v = xy[i,:2]-curr[-1][:2]
        if np.dot(v, v) < 0.1/(curr[-1][2] + xy[i,2]):
            curr.append(xy[i])
        else:
            if len(curr) >= 5:
                r.append(np.array(curr.copy()))
            curr = [xy[i]]
        i += 1
    if len(curr) >= 5: #fusion 1er et dernier si proche
        v = r[0][0,:2]-curr[-1][:2]
        if np.dot(v, v) < 0.1/(curr[-1][2] + r[0][0,2]):
            r[0] = np.append(np.array(curr.copy()), r[0])
            r[0] = r[0].reshape((len(r[0])//4), 4)
        else:
            r.append(np.array(curr.copy()))
    return r

gs = group(l1)
#for g in gs:
#    plt.plot(g[:,0], g[:,1], "d")
#plt.show()

smooth = lambda N : N*1/40
def spline(g):
    N = len(g)
    spl, u = make_splprep([g[:,0], g[:,1]], s=smooth(N), k=5)
    return spl, u

for g in gs:
    spl, u = spline(g)
    plt.plot(*spl(u), '--')
#plt.show()
#exit()

def POI(g):
    spl, u = spline(g) #1 u per g : ok

    #curvature (k = 1/R)
    dx, dy = spl.derivative(nu=1)(u)
    ddx, ddy = spl.derivative(nu=2)(u)
    K = (dx * ddy - dy * ddx) / ((dx ** 2 + dy ** 2) ** (3 / 2))

    xyK = np.vstack((g[:,:2].T, abs(K) )).T

    p, _ = find_peaks(xyK[:,-1], height=0.2) #list of index of peak
    r = list(xyK[p,:])

    #add middle point
    for i in range(1, len(p)):
        if dstsq(xyK[p[i-1],:2], xyK[p[i], :2]) > 0.25 and p[i]-p[i-1] > 10: #if distance > 0.5m and more than 5 points between
            a, b = p[i-1], p[i]
            m = (a+b)//2

            #plt.plot(xyK[m,0], xyK[m,1], "d", color="red", linestyle="")

            da = dstsq(xyK[a,:2], xyK[m, :2])
            db = dstsq(xyK[b,:2], xyK[m, :2])
            while a+1 < b and (abs(da - db) > 1e-2):
                m = (a+b)//2
                da = dstsq(xyK[p[i-1],:2], xyK[m, :2])
                db = dstsq(xyK[p[i],:2], xyK[m, :2])
                if da > db: #a est plus loin, on rapproche a
                    b = m
                else:
                    a = m
            if m != p[i] and m != p[i-1]: #not add the same point
                r.append(xyK[m])

    return r

POIs = []
for g in gs:
    POIs.extend(POI(g))
POIs = np.array(POIs)
plt.plot(POIs[:,0], POIs[:,1], "d", color="orange", linestyle="")

Dev = 5*np.pi/180
dp = [3.5e-2, -3e-1]
R = np.array([[np.cos(Dev), -np.sin(Dev), dp[0]], [np.sin(Dev), np.cos(Dev), dp[1]]])

def mv(xyK): #debug function for fake movement
    r = xyK.copy()
    xy = r[:,:-1]
    xy = tilde(xy)
    #print(xy[0])

    r[:,:-1] = (R @ xy.T).T #BRUH
    return r

#plt.figure()

g2 = list(map(mv, gs))
for g in g2:
    g += (1-2*np.random.random(g.shape)) * 1e-3
    plt.plot(g[:, 0], g[:, 1], "r+")
#plt.show()

POI2 = []
for g in g2:
    add = POI(g)
    POI2.extend(add)
POI2 = np.array(POI2)
plt.plot(POI2[:,0], POI2[:,1], "d", color="yellow", linestyle="")

XY2 = POI2[:,:-1]
XY0 = POIs[:,:-1]
if XY0.shape == XY2.shape:
    Rr = (np.linalg.pinv( tilde(XY0) ) @ (XY2)).T
    print("Reconstruct R from rotation of same data, no shuffle MSE:", np.mean( (Rr-R)**2 ) )

np.random.shuffle(POI2)
POI2 = POI2[:-1] #shuffle + skip one

def findNearPoi(poi0, poi2):
    r = []
    for poi in poi0:
        dst = dstsq(poi, poi2)
        i2 = np.argmin(dst)
        if dst[i2] < 1e-1: #8cm
            r.append( [poi, poi2[i2] ])
    return np.array(r)

linked = findNearPoi(POIs, POI2)
print("find", len(linked), "points out of", len(POI2))
print("")
Rr = (np.linalg.pinv( tilde(linked[:,0,:-1]) ) @ (linked[:,1,:-1])).T

U, _, Vt = np.linalg.svd(Rr[:,:-1])
Rr[:,:-1] = np.dot(U, Vt)

print("Reconstruct R from rotation of same data, with shuffle & losses & noise. MSE:", np.mean( (Rr-R)**2 ) )
xy = Rr[:,-1]
print("x, y", xy, " - MSE:", np.mean( (dp-xy)**2 ))
theta = (np.arccos(Rr[0,0])+np.arcsin(-Rr[0,1])+np.arcsin(Rr[1,0])+np.arccos(Rr[1,1])) / 4
print("theta:", theta, " - MSE:", np.mean( (theta-Dev)**2 ))

plt.show()
